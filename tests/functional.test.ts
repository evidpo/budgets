import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { supabase } from '../frontend/lib/supabase';

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–°–µ–º–µ–π–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã"

describe('–°–µ–º–µ–π–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã', () => {
  // –¢–µ—Å—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  describe('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', () => {
    it('–¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', async () => {
      const { data: transaction, error } = await supabase
        .from('transactions')
        .insert({
          household_id: 'test_household_id',
          account_id: 'test_account_id',
          amount: -1000,
          date: '2023-01-01',
          description: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞',
          type: 'expense'
        })
        .select()
        .single();

      expect(error).toBeNull();
      expect(transaction).toBeDefined();
      expect(transaction?.amount).toBe(-1000);
      expect(transaction?.type).toBe('expense');
    });

    it('–¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', async () => {
      const { data: transaction, error } = await supabase
        .from('transactions')
        .insert({
          household_id: 'test_household_id',
          account_id: 'test_account_id',
          amount: 5000,
          date: '2023-01-02',
          description: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Ö–æ–¥',
          type: 'income'
        })
        .select()
        .single();

      expect(error).toBeNull();
      expect(transaction).toBeDefined();
      expect(transaction?.amount).toBe(5000);
      expect(transaction?.type).toBe('income');
    });

    it('–¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏', async () => {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
      const transferId = crypto.randomUUID();
      
      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥—è—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Ä–∞—Å—Ö–æ–¥)
      const { data: fromTx, error: fromError } = await supabase
        .from('transactions')
        .insert({
          household_id: 'test_household_id',
          account_id: 'test_account_1',
          amount: -1000,
          date: '2023-01-03',
          description: '–ü–µ—Ä–µ–≤–æ–¥',
          type: 'expense',
          transfer_id: transferId
        })
        .select()
        .single();

      // –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥—è—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–æ—Ö–æ–¥)
      const { data: toTx, error: toError } = await supabase
        .from('transactions')
        .insert({
          household_id: 'test_household_id',
          account_id: 'test_account_2',
          amount: 1000,
          date: '2023-01-03',
          description: '–ü–µ—Ä–µ–≤–æ–¥',
          type: 'income',
          transfer_id: transferId
        })
        .select()
        .single();

      expect(fromError).toBeNull();
      expect(toError).toBeNull();
      expect(fromTx).toBeDefined();
      expect(toTx).toBeDefined();
      expect(fromTx?.transfer_id).toBe(transferId);
      expect(toTx?.transfer_id).toBe(transferId);
      expect(fromTx?.amount).toBe(-100);
      expect(toTx?.amount).toBe(1000);
    });
  });

  // –¢–µ—Å—Ç—ã –¥–ª—è –±—é–¥–∂–µ—Ç–æ–≤
  describe('–ë—é–¥–∂–µ—Ç—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—é–¥–∂–µ—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –æ—Å—Ç–∞—Ç–∫–∞', async () => {
      const { data: budget, error } = await supabase
        .from('budgets')
        .insert({
          household_id: 'test_household_id',
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –±—é–¥–∂–µ—Ç',
          amount: 10000,
          period: 'month',
          start_date: '2023-01-01',
          end_date: '2023-01-31',
          direction: 'expense',
          rollover: true
        })
        .select()
        .single();

      expect(error).toBeNull();
      expect(budget).toBeDefined();
      expect(budget?.name).toBe('–¢–µ—Å—Ç–æ–≤—ã–π –±—é–¥–∂–µ—Ç');
      expect(budget?.amount).toBe(10000);
      expect(budget?.rollover).toBe(true);
    });

    it('–¥–æ–ª–∂–µ–Ω –≤—ã—á–∏—Å–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –±—é–¥–∂–µ—Ç–µ', async () => {
      // –°–æ–∑–¥–∞–µ–º –±—é–¥–∂–µ—Ç
      const { data: budget } = await supabase
        .from('budgets')
        .insert({
          household_id: 'test_household_id',
          name: '–ë—é–¥–∂–µ—Ç –Ω–∞ —Ç–µ—Å—Ç',
          amount: 5000,
          period: 'month',
          start_date: '2023-01-01',
          end_date: '2023-01-31',
          direction: 'expense',
          rollover: false
        })
        .select()
        .single();

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –±—é–¥–∂–µ—Ç–∞
      await supabase.from('transactions').insert([
        {
          household_id: 'test_household_id',
          account_id: 'test_account_id',
          amount: -1000,
          date: '2023-01-10',
          description: '–ü–æ–∫—É–ø–∫–∞ 1',
          type: 'expense',
          budget_id: budget?.id
        },
        {
          household_id: 'test_household_id',
          account_id: 'test_account_id',
          amount: -200,
          date: '2023-01-15',
          description: '–ü–æ–∫—É–ø–∫–∞ 2',
          type: 'expense',
          budget_id: budget?.id
        }
      ]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—é–¥–∂–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      expect(budget).toBeDefined();
      expect(budget?.amount).toBe(5000);
    });
  });

  // –¢–µ—Å—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
  describe('–û—Ç—á–µ—Ç—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –±—é–¥–∂–µ—Ç–∞–º', async () => {
      // –°–æ–∑–¥–∞–µ–º –±—é–¥–∂–µ—Ç
      const { data: budget } = await supabase
        .from('budgets')
        .insert({
          household_id: 'test_household_id',
          name: '–û—Ç—á–µ—Ç–Ω—ã–π –±—é–¥–∂–µ—Ç',
          amount: 3000,
          period: 'month',
          start_date: '2023-01-01',
          end_date: '2023-01-31',
          direction: 'expense',
          rollover: false
        })
        .select()
        .single();

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
      await supabase.from('transactions').insert([
        {
          household_id: 'test_household_id',
          account_id: 'test_account_id',
          amount: -500,
          date: '2023-01-05',
          description: '–û—Ç—á–µ—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ 1',
          type: 'expense'
        },
        {
          household_id: 'test_household_id',
          account_id: 'test_account_id',
          amount: -750,
          date: '2023-01-15',
          description: '–û—Ç—á–µ—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ 2',
          type: 'expense'
        }
      ]);

      expect(budget).toBeDefined();
      expect(budget?.name).toBe('–û—Ç—á–µ—Ç–Ω—ã–π –±—é–¥–∂–µ—Ç');
    });

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', async () => {
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const { data: category } = await supabase
        .from('categories')
        .insert({
          household_id: 'test_household_id',
          name: '–ü—Ä–æ–¥—É–∫—Ç—ã',
          type: 'expense',
          color: '#FF0000',
          icon: 'üõí'
        })
        .select()
        .single();

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
      await supabase.from('transactions').insert([
        {
          household_id: 'test_household_id',
          account_id: 'test_account_id',
          amount: -300,
          date: '2023-01-07',
          description: '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ 1',
          type: 'expense',
          category_id: category?.id
        },
        {
          household_id: 'test_household_id',
          account_id: 'test_account_id',
          amount: -450,
          date: '2023-01-18',
          description: '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ 2',
          type: 'expense',
          category_id: category?.id
        }
      ]);

      expect(category).toBeDefined();
      expect(category?.name).toBe('–ü—Ä–æ–¥—É–∫—Ç—ã');
    });
  });

  // –¢–µ—Å—Ç—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ CSV
  describe('–ò–º–ø–æ—Ä—Ç CSV', () => {
    it('–¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ CSV', async () => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactionsToImport = [
        {
          date: '2023-01-01',
          amount: -1250,
          description: '–ò–º–ø–æ—Ä—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ 1',
          payee: '–ú–∞–≥–∞–∑–∏–Ω 1',
          account_id: 'test_account_id',
          household_id: 'test_household_id'
        },
        {
          date: '2023-01-02',
          amount: -750,
          description: '–ò–º–ø–æ—Ä—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ 2',
          payee: '–ú–∞–≥–∞–∑–∏–Ω 2',
          account_id: 'test_account_id',
          household_id: 'test_household_id'
        }
      ];

      const { data, error } = await supabase
        .from('transactions')
        .insert(transactionsToImport)
        .select();

      expect(error).toBeNull();
      expect(data).toBeDefined();
      expect(data?.length).toBe(2);
    });

    it('–¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ', async () => {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
      const { data: transactions } = await supabase
        .from('transactions')
        .insert([
          {
            household_id: 'test_household_id',
            account_id: 'account_1',
            amount: -2000,
            date: '2023-01-01',
            description: '–ü–µ—Ä–µ–≤–æ–¥',
            type: 'expense'
          },
          {
            household_id: 'test_household_id',
            account_id: 'account_2',
            amount: 2000,
            date: '2023-01-01',
            description: '–ü–µ—Ä–µ–≤–æ–¥',
            type: 'income'
          }
        ])
        .select();

      expect(transactions).toBeDefined();
      expect(transactions?.length).toBe(2);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–º–µ—é—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Å—É–º–º—ã
      if (transactions && transactions.length >= 2) {
        const firstTx = transactions[0];
        const secondTx = transactions[1];
        expect(firstTx.amount).toBe(-secondTx.amount);
      }
    });
  });

  // –¢–µ—Å—Ç—ã –¥–ª—è —Ä–æ–ª–µ–π
  describe('–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏', async () => {
      // –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ä–æ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –≤ Supabase
      // –ó–¥–µ—Å—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–æ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ members —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ role
      const { data: members, error } = await supabase
        .from('members')
        .select('role')
        .limit(1);

      expect(error).toBeNull();
      expect(members).toBeDefined();
    });
  });
});